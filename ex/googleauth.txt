To be able to use googel auth services wee need to tell google our app is using their sevices 
why google want this as they dont want anyone ping their servers unnecessarily and for security we 
have to do this 

step 1 go to console.developers.google.com and create a new project name codeial-development

setep 2 set the credential for this project 

step 3 after all the settings done we recieve clientid and clientsecret from google for our 
project

these credentials are used by our application every time identity of user is established through google
-----------------------------------------------------------------------------------------------------------
understanding how it all works 

step 1  let user A comes and click on signin/signup with google then a popup opens in anther window 
saying me to login with my account (asking for permission that codeial is asking for acces your account)
and after i give access then this req goes to servers of google this check inits db that user with account
exists or not once this mathcing done succesfuly then it hit/calls  another url (called callback url with some data of user)
 on the same browser who made req previously for my codeial server and now my codeial server check wheather 
 the recieved data of user already exists in db if exists then give login other wise  //create new user with
 recieve data in db and then give login  basically signup the user  

 ---------------------------------------------------------------------------------------------------------

step 5 installing googelauth2 strategy to project
npm install passport-google-ouath


step 6 :installing crypto to genreate random password
npm install crypto

 step 7: creating new config file for google auth strategy
 const passport=require('passport');

//getting googleouath2 strategy  
const googlestrategy =require('passport-google-oauth').OAuth2Strategy;


//getting crypto library as we know if user is not present we will save user in db 
//but there password field will get empty and we know we have made this field required 
//in model so to fill this passwrod field with random passwrod we need library crypto

const crypto=require('crypto');

//also need user model
const User=require('../models/user');

//telliin passport to use a new strategy for googel login
//creating new googelstrategy object and passing options 

passport.use(new googlestrategy({

clientID:"831968721597-pf1aq51goj4e78jgjkuebf754h8ga9vh.apps.googleusercontent.com",
clientSecret:"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",

//this  is the url we set while settin credentials of our project in goole site
callbackURL:"http://localhost:8000/user/auth/google/callback"

},


//callback function taking accestoken  generated by google and sent to us in header as we are doing in jwt
//also a refresh token if accestoken expires we use refresh token to get new acces token
//user info(data)proifle
//and final funtion whichis going to takin callback from this function

function(accessToken,refreshToken,profile,done){

    //google gives us user info in profile and hrere email field is array fo emails usre have
User.findOne({email:profile.emails[0].value}).exec(function(err,user){


if(err){console.log("erronin google strategy",err); reutrn }

console.log(profile);

//if we find user in db we pass user to done
 if(user)
 return done(null,user);


 //if user not fonund in db of codeila we save user (singup user received)
else
{
User.create({

name:profile.displayName,
email:profile.emails[0].value,
password:crypto.randomBytes(20).toString('hex')     //generaing random password for user to fill passwrod field


},function(err,user){

if(err){console.log("erron in creating user",err);return}

return done(null,user);
})
}
})     
}
));

module.exports=passport;



step 8:creatin routes for signin using google 

//first route which we hit signin using google button redirects to google
//google will automatically recoganise when req came fromthis url 
//authencate(which strategy using ,scope)
//scope is the info which we are looking to fetch
//here we want to fetch profile  and email is not the part of profile so if i want email we need permsion
router.get('/auth/google',passport.authenticate('google',{scope:['profile','email']}))



//second route which google will hit and pass the data onto this 
//it is the callback url we mention in credentials  in google 
//after authenticate redirect to homepage using createsesion controller
router.get('/auth/google/callback',passport.authenticate('google',{failureRedirect:'/user/signin'}),userController.createsession);



step 9:adding singin usin google buttion in signup.ejs
<div>
    <p><a href="/user/auth/google">google signin/signup</a></p>
</div>





----------------------------------------------------------------------------------------------------------
google sent data in profile as
{
  id: '114180299013813934629',
  displayName: 'james wick',
  name: { familyName: 'wick', givenName: 'james' },
  emails: [ { value: 'barwal7861@gmail.com', verified: true } ],
  photos: [
    {
      value: 'https://lh3.googleusercontent.com/a/AATXAJyNxYodArgqUABOEJfjaymiTnKzKVkC9mv_dvnS=s96-c'
    }
  ],
  provider: 'google',
  _raw: '{\n' +
    '  "sub": "114180299013813934629",\n' +
    '  "name": "james wick",\n' +
    '  "given_name": "james",\n' +
    '  "family_name": "wick",\n' +
    '  "picture": "https://lh3.googleusercontent.com/a/AATXAJyNxYodArgqUABOEJfjaymiTnKzKVkC9mv_dvnS\\u003ds96-c",\n' +     
    '  "email": "barwal7861@gmail.com",\n' +
    '  "email_verified": true,\n' +
    '  "locale": "en-GB"\n' +
    '}',
  _json: {
    sub: '114180299013813934629',
    name: 'james wick',
    given_name: 'james',
    family_name: 'wick',
    picture: 'https://lh3.googleusercontent.com/a/AATXAJyNxYodArgqUABOEJfjaymiTnKzKVkC9mv_dvnS=s96-c',
    email: 'barwal7861@gmail.com',
    email_verified: true,
    locale: 'en-GB'
  }
}


 --------------------------------------------------------------------------------------------------------------
  describing what is happening all

  step 1 user click the singin with google he directed to this route
  router.get('/auth/google',passport.authenticate('google',{scope:['profile','email']}))


  step 2 now passport.authencate() is invoked and telling passport to use google strategy and
  what data we need from user profile froom google

  step 3 then this passport will redirect us to google consent screen where all user 
  google accounts are seen 

  step 4 now user select account and then i have gone through google authencation and after it is done google
   will call redirect url we provided  http://localhost:8000/user/auth/google/callback   


   step 5  we get user info sent to us but this is not true 
   we get a code='dnfdkvndskvnkdslvdsskvsd' in the callback url req and this code is used by the passport
   to interact with google to get info  
  we have req from google with this url 
  http://localhost:8000/user/auth/google/callback?code=4%2F0AX4XfWgUx6PPbcFhevCYxjytXvSV5V9e1E-txnNTbL3vgDJcge_R0TUC4ibeIkFSl9eSoA&scope=email+profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+openid&authuser=1&prompt=consent

  above req reach to this route in our nodejs server 
 router.get('/auth/google/callback',passport.authenticate('google',{failureRedirect:'/user/signin'}),userController.createsession);


step 5 now before controller is invoked the middleware passport.authencate() fires

diff between the above passport.authencate()  in step 2 and this step 5 is that previously passport
dont have any code so it is redirecting us to consent screen but now our passport has code sent by 
google in callback url so instead of sending us to consent screen passport use the code inexchange of 
user information (profile) from google and it comes back and fires the callback in config file 
below google strategy 

here profile will have the exchanged info 
function(accessToken,refreshToken,profile,done){

User.findOne({email:profile.emails[0].value}).exec(function(err,user){

if(err){console.log("erronin google strategy",err); reutrn }

//if we find user in db we pass user to done
 if(user)
 return done(null,user);   -->this will  invoke serializer() function

 //if user not fonund in db of codeila we save user (singup user received)
else
{
User.create({

name:profile.displayName,
email:profile.emails[0].value,
password:crypto.randomBytes(20).toString('hex')     //generaing random password for user to fill passwrod field


},function(err,user){

if(err){console.log("erron in creating user",err);return}

return done(null,user);                  ///->this will  invoke serializer() function


})
}


})     

}



//now above serializer( )function  is called  we know in serializer we just passed  (field
which we want to put in cookie) to the next stage in done where it is put into cookie and send it to browser
so browser knows who it is and when it sends it back we knows who it is 

passport.serializeUser(function(user,done){
done(null,user.id)            -->this done is the stage where id is stuffed into cookie   
  
})


//when they come back to us we want user from the id so we pass id which we retrieved from cookie amd pass to deserialize
//when there is another req to see user profile then broser sent the cookie and now we get 
//the id from cookie and we want to know who is user so deserialize it 
passport.deserializeUser(function(id,done)
{
User.findById(id,function(err,user){
    if(err){console.log("error finding ueer");
   return done(err);
}
return done(null,user);       --> passing the found user using id to next stage where this is 
                                     //user is attached to request req.user

})

});




///now we want session cookies as we dont want to send id directly to cookie in browser we want to 
encrypt it first so we use session cookies

app.use(session({
  name:'codeial',  ///name of cookie
 secret: 'blahsomething',            //whenever encryption happen ther is key to encode and decode    
}))


so know when userid passed to done in serializer then thsi above thing will encrypt the cookie 
set the age for cookie then send it to the browser



----->when user login then above all things happen ,all the serializer .deserialize things hapend 
when the passport.authencate() callded from callbackURL route 

then in the controller of this route our req object has user attached to it by deserialize
and we can acces it like req.user;







