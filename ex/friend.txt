we need friend functioallity in our website what we want in home page there wil be user wall 
and freinds wall 
when logged in user goews to anotehr user profile page there is button with add friend he clicks that 
and now both the loggen inuser and profile page user will be friend and no in the home page we can see 
the  freinds wall with all the friend of logeen in user 


//step 1 thinking about friend schema before that lets understand how friends will save in relation 
database 

let understand with author and books example 

two tables 
1: book table                                           2 author table 

id  name     author                                 id    name   books 
1   c++       3,4                                   1    ar      2
2   java      1,2                                   2    vr      2,4
3   python    3                                     3    pr      1,3
4    dsa       2                                    4     tr     1


// right now if i want to find all author of c++ i can find it 
//difficult part if i want to find from book table which all books are writen by id=3 i have to goto eahc entry
and travel throuh array of author ids and find which has entry id =3 

similary for author tabel if i want to find all the authors of book id=1 same traversing will needed

---------------------------------------------------------------------------------------------------h
how to solve this i will remove the these array of id colums and i wil create a newtablle which
is called join table 



1: book table              jointable                               2 author table 

id  name                 bookid   authorid                            id    name   
1   c++                  1          3                                  1    ar      
2   java                 1          4                                  2    vr      
3   python               2          1                                  3    pr      
4    dsa                 2          2                                  4     tr      
                         3          3
                         4          2

//now if i want to find all books writen by id=3 then i just have to go in jointable enteries and 
findout where all 3 is writtern i dont havae to iterate multiple arrays now 


------------------------------------------------------------------------------------------------
understanding the friend relation 


a user is a friend of user literally ther will be only one table 
users                          
id   name 
1    pr
2    tr
3     jh
4     yt


//here also one solytion is i can store everyting in one colummn friendship array who ids of who all freinds
or making another table storing  

users                             friendship                
id   name                          userid friendid 
1    pr                             1      2
2    tr                             1      3
3     jh                            2      4
4     yt                            3       4


both userid and friendid refer to singel tabel users now whenever i need to find all freinds of userdi =1
i need to travel in friendship enery finding all 1 occurence stil it will be a faster travesal then 
iteraint over arrays colummn of ids 



-----------------------------------------------------------------------------------------------------
now how it works in mongodb 

we will create a schema of freindsship  

friendship 
{

to_user:{id, ref User}
from_user:{id,ref User}

}

and in the json database we store teh array also so user wil contain field called friends 
which is array of freindsship 

user
{
    name:
    email:
    password:
    avatar:
    friend:[{freindsship}]            //to display the friends of user  fastly without going to freindsship model again and again 
}



-->when u saw books and author that was many to many throuh join table
-->when u saw friend in nosql db this is again many to many relationship throuh join schema

the differnce is whenever u are creating u are also stroing array

-->when friedship are shaped up in sql db they are called self referencing many to many relationship


------------------------------------------------------------------------------------------------------------

step 1 creating new schema friend and  making model of this schema creting freind.js in models
const mongoose = require('mongoose');
const friendSchema= new mongoose.Schema({

   // the user who sent this request
   from_user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
},
// the user who accepted this request, the naming is just to understand, otherwise, the users won't see a difference
to_user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
},
},{
timestamps: true

});
const Friend=mongoose.model('Friend',friendSchema);
module.exports=Friend;


step 2 : adding freind array field to user schema
 //adding array of friend to easy acces who are friends of user
   friends:[
    {
    type:mongoose.Schema.Types.ObjectId,
    ref: 'Friend' 
    }



step 3 :creating freind controller for creating freind when some click add freind link in profile page 

const Friend=require('../models/friend');
const User= require('../models/user');
module.exports.createfriend= async function(req,res)
{
try {
    
    //putting delte to get find freind is delted by clicking btn or creting in js file but not used
    //in js i hadnt created ajac so i ussed it to send noty 
    var deleted=false; 

console.log(req.user.id);
console.log(req.params.id);


//checking if the freind already exist with  in friend collection with this touser and fromuser
let existingfriend= await Friend.findOne({

to_user:req.params.id,
from_user:req.user.id
    
})


//also getting touesr document and fromuser document to push/pull into array friends the created freind
let touser= await User.findById(req.user._id);
let fromuser=await User.findById(req.params.id);



//if we found there is already friend tehn we remove the this freind form freind model and arrays of friends
//fo touser and from user document 
if(existingfriend)
{

    //remvoeing from touser aray friend
    touser.friends.pull(existingfriend._id);
    touser.save();
    
    //remvoing from fromuer array friends
    fromuser.friends.pull(existingfriend._id);
    fromuser.save();  
    
    existingfriend.remove();
    
    deleted=true;
}


//if not already exits createg teh friend  in collection
else
{
    let newfriend= await Friend.create({

        from_user:req.user._id,
        to_user:req.params.id
    
    });
    

    //;\pusing to both touser arrya and from user array of friend to know wheather he has send the req 
    //to freind or get a req form freind  
    //when we use this and a user add freind b then now if we see a user home screen has b in friend list
    //and if we go to b user home screen we will see a in friend list this is acheived through this 
    
    touser.friends.push(newfriend);
    touser.save();
    fromuser.friends.push(newfriend);
    fromuser.save();


}

if(!deleted)
req.flash('success','friend added ');
else
req.flash('success','friend remvoed')

return res.redirect('/');


} catch (err) {
    if(err){console.log("internal server ereor",err);}

    return res.json(500,{
        message:"internal server error"
    })
    
}
    

}

//added dont know why when we clikc delte btn in frind wall of user home screen
module.exports.deletefriend= async function(req,res)
{
try {

  console.log("we are in deletecontrller")


    console.log(req.user.id);
    console.log(req.params.id);


let dfriend= await Friend.findById(req.params.id);

await User.findByIdAndUpdate(dfriend.to_user,{ $pull:{friends:req.params.id }})
await User.findByIdAndUpdate(dfriend.from_user,{ $pull:{friends:req.params.id }})


    dfriend.remove();  

req.flash('success','friend removed')
return res.redirect('/');


} catch (err) {
    if(err){console.log(err);}

      return res.json(500,{
        message:"internal server error"
    })
}

}


step 4: creating route for this controller in route folder we create new freind.js file for route
const friendController = require('../controllers/friend_controller');

router.use(express.urlencoded({ extended: true }));
router.get('/createfriend/:id',friendController.createfriend);
router.get('/deletefriend/:id',friendController.deletefriend);

module.exports=router;

step 5: using it in index.js route file
router.use('/friend',require('./friend'))

step 6: passing user from home controller to views 

 //if user is signed in then populate the current signed user friends array with friendhsip 
  //and send it to viws for displaying 
  if(req.user){

 let cuser= await User.findById(req.user.id).populate({
  path:'friends',
  populate:{
    path:'to_user from_user'
  }
 });
    
  console.log(cuser);

  return res.render('home_page',{                                              //then this get executed
    title:'home', 
   posts:posts,
   all_users:users,
   cuser:cuser                 //passing currentlogedin user after populatin aray field         
   });
  }

    return res.render('home_page',{                                              //then this get executed
           title:'home', 
          posts:posts,
          all_users:users,                         
          });
  
  
  }


  step 7: changin our vies file home.ejs and showing friend of logedn in user 
     <!-- is user is loged in  -->
       <%if (locals.user){%>
        <div id="friends">
            <h2>friends</h2>
            <% for (f of cuser.friends) {%>
            
                <!-- //link to the profile of user -->
                   <div class="chip">

                    <!-- now login user is in local and and current user is send from home controller cuser
                        with populated freind array field 
                    iterating over all the friend documents  [{touser:{}},{from_user{}},{touser:{},from_user{} }]
                    and we know now the every user either can recived req and or sent req
                    so wherever loggedinuser is not present either in touser or fromuser then that filed is containign 
                    friend of this logeedinuser 

                    basicllay in aray of freinds this logedin user must be present in one of the field 
                    that is eitehr to_user (receive req) so freind is present in from_user
                    or  from_user(sent req)  so freind is present in to_user
                    -->
                    <% if  (locals.user.id != f.to_user.id ) { %>
                     <p><img src="<%=f.to_user.avatar%>" alt="no image"  width="40" height="40"><%=f.to_user.name%> </p>

                    <%}%>

                    <% if  (locals.user.id != f.from_user.id ) { %>
                        <p><img src="<%=f.from_user.avatar%>" alt="no image"  width="40" height="40"><%=f.from_user.name%> </p>
   
                       <%}%>



                     <% if  (locals.user && locals.user.id == cuser.id ) { %>
                        <p><a href="/friend/deletefriend/<%=f._id%>"><i class="fas fa-trash"></i></a></p>  
                        <%}%> 
                    </div> 
                
                <%}%>
        </div>

      <%}%>




      step 9: sending hasfreind var from userproifle controlelr to set the text of link acc to this
      module.exports.profile = (req, res) =>
{
    User.findById(req.params.id, function (error, user)
    {
        if (error)
        {
            console.log('error in finding the user profile!');
            return;
        }
       //to display add friend and remove freind on profile acc to this var
        let hasfriend = false;

     //why not like this finding freind see let john send friend req to abubarwal 
     //then to_user:abubarwal  | from_user: john
     //if john login and go to abubarwal profile page this hasfriend will works because we will able to 
     //find frind with {to_user:abubarwal  | from_user: john} and so add friend to removfriend change
    //now if u sign in using abubarwal then  here hasfriend will always false becaouese 
    //qeury  { to_user:abubarwal  | from_user: john} will find nothing because here 
    //  here we have to find  {from_user:abubarwal  |  to_user:john}    {loggedinuser:   |  profilepageuser   }

    //  Friend.findOne({
    //     to_user:req.params.id,
    //     from_user:req.user.id
    //     },function(err,friend){
    //     if(err){console.log("error",err);return}
    //     console.log("enterd in friend")
    //      if(friend)
    //      hasfriend=true;
    //     })
        Friend.findOne({
            $or: [{ from_user: req.user._id, to_user: req.params.id },
            { from_user: req.params.id, to_user: req.user._id }]
        }, function (error, friend)
        {
            if (error)
            {
                console.log('There was an error in finding the friendship', error);
                return;
            }
            if (friend)
            {
                hasfriend = true;
            }
            /* console.log(req.user);
            console.log(req.user._id, '********', req.params.id, '*******') */
            var options =
            {
                title: "profile page",
                profile_user: user,/* it is the user whose profile i am currently browsing */
                hasfriend: hasfriend
            }
            return res.render('user_profile', options);
        })


    });

}

step 10: changin our profile.ejs for addfriend and remvoe friend
    <!-- getting this propery hasfirend true or false from userprofile controler and if hasfriend true 
         show remvoe friend text in  link
         else
         shoeing add friend text in link
        -->

     <%if(hasfriend){%>
            <a type="button" id="new-friend-link" href="/friend/createfriend/<%=profile_user.id%>" class="btn btn-danger text-white"   > remove friend</a>
         
        <%}else{%>
            <a id="new-friend-link" href="/friend/createfriend/<%=profile_user.id%>"  id="add-friend" class="btn btn-primary text-white"    >add friend</a>    
        <%}%>